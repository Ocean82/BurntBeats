import { useState, useCallback, useMemo } from "react";
import Sidebar from "@/components/sidebar";
import SongForm from "@/components/song-form";
import AudioPlayer from "@/components/audio-player";
import GenerationProgress from "@/components/generation-progress";
import DownloadOptions from "@/components/download-options";
import SongEditor from "@/components/song-editor";
import SongLibrary from "@/components/song-library";
import AnalyticsDashboard from "@/components/analytics-dashboard";
import VersionControl from "@/components/version-control";
import CollaborationTools from "@/components/collaboration-tools";
import CollaborativeWorkspace from "@/components/collaborative-workspace";
import MusicTheoryTools from "@/components/music-theory-tools";
import SocialFeatures from "@/components/social-features";
import VoiceRecorder from "@/components/voice-recorder";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Music, HelpCircle, Settings, User, Crown, LogOut } from "lucide-react";
import type { Song } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";
import { useErrorHandler } from "@/hooks/use-error-handler";

interface SongGeneratorProps {
  user: {
    id?: number;
    username?: string;
    plan?: 'free' | 'pro';
    songsThisMonth?: number;
  };
  onUpgrade: () => void;
  onLogout: () => void;
}

export default function SongGenerator({ user, onUpgrade, onLogout }: SongGeneratorProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [generatingSong, setGeneratingSong] = useState<Song | null>(null);
  const [completedSong, setCompletedSong] = useState<Song | null>(null);
  const [activeMenu, setActiveMenu] = useState("New Song");
  const [editingSong, setEditingSong] = useState<Song | null>(null);
  const userPlan = user?.plan || "free";
  const { toast } = useToast();
  const { handleError } = useErrorHandler();

  const handleSongGenerated = useCallback((song: Song) => {
    try {
      setGeneratingSong(song);
    } catch (error) {
      handleError(error as Error);
    }
  }, [handleError]);

  const handleGenerationComplete = useCallback((song: Song) => {
    try {
      setGeneratingSong(null);
      setCompletedSong(song);
      setCurrentStep(3);
    } catch (error) {
      handleError(error as Error);
    }
  }, [handleError]);

  const handleSongUpdated = useCallback((song: Song) => {
    try {
      setCompletedSong(song);
    } catch (error) {
      handleError(error as Error);
    }
  }, [handleError]);

  const handleMenuClick = useCallback((menuKey: string) => {
    switch (menuKey) {
      case "new-song":
        setActiveMenu("New Song");
        setCurrentStep(1);
        setGeneratingSong(null);
        setCompletedSong(null);
        setEditingSong(null);
        break;
      case "library":
        setActiveMenu("Song Library");
        break;
      case "recent":
        setActiveMenu("Recent Creations");
        break;
      case "voice":
        setActiveMenu("Voice Samples");
        break;
      case "analytics":
        setActiveMenu("Analytics");
        break;
      case "version":
        setActiveMenu("Version Control");
        break;
      case "collaboration":
        setActiveMenu("Collaboration");
        break;
      case "theory":
        setActiveMenu("Music Theory");
        break;
      case "social":
        setActiveMenu("Social Hub");
        break;
      case "downloads":
        setActiveMenu("Downloads");
        break;
    }
  }, []);

  const handleEditSong = useCallback((song: Song) => {
    setEditingSong(song);
    setActiveMenu("Song Editor");
  }, []);

  const steps = useMemo(() => [
    { id: 1, name: "Lyrics & Style", active: currentStep === 1 },
    { id: 2, name: "Voice & Audio", active: currentStep === 2 },
    { id: 3, name: "Generate & Edit", active: currentStep === 3 },
  ], [currentStep]);

  const renderMainContent = useMemo(() => {
    switch (activeMenu) {
      case "Song Library":
        return <SongLibrary userId={user?.id || 1} onEditSong={handleEditSong} />;
      case "Recent Creations":
        return <SongLibrary userId={user?.id || 1} onEditSong={handleEditSong} />;
      case "Voice Samples":
        return <VoiceRecorder userId={user?.id || 1} />;
      case "Analytics":
        return userPlan === "pro" ? (
          <AnalyticsDashboard userId={user?.id || 1} />
        ) : (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <Crown className="w-16 h-16 text-yellow-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold mb-2">Pro Feature</h3>
              <p className="text-gray-400 mb-4">Analytics dashboard is available with Pro subscription</p>
              <Button onClick={onUpgrade} className="bg-gradient-to-r from-vibrant-orange to-orange-600">
                Upgrade to Pro
              </Button>
            </div>
          </div>
        );
      // ... rest of the switch cases
    }
  }, [activeMenu, user, completedSong, editingSong, handleEditSong, userPlan, onUpgrade]);

  return (
    <div className="flex h-screen bg-dark-bg text-white">
      <Sidebar onMenuClick={handleMenuClick} activeMenu={activeMenu} />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <header className="bg-dark-card px-8 py-4 border-b border-gray-800">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-8 h-8 bg-gradient-to-r from-spotify-green to-green-600 rounded-full flex items-center justify-center">
                <Music className="w-4 h-4 text-white" />
              </div>
              <div>
                <h2 className="text-xl font-poppins font-semibold">BangerGPT</h2>
                <p className="text-sm text-gray-400">Create New Song</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="text-right">
                  <p className="text-white text-sm font-medium">{user?.username}</p>
                  <div className="flex items-center space-x-2">
                    <Badge className={userPlan === "pro" ? "bg-yellow-500/20 text-yellow-400" : "bg-gray-500/20 text-gray-400"}>
                      {userPlan === "pro" ? (
                        <>
                          <Crown className="w-3 h-3 mr-1" />
                          Pro
                        </>
                      ) : (
                        "Free"
                      )}
                    </Badge>
                    {userPlan === "free" && (
                      <span className="text-xs text-gray-400">
                        {user?.songsThisMonth || 0}/3 songs
                      </span>
                    )}
                  </div>
                </div>
                
                {userPlan === "free" && (
                  <Button
                    onClick={onUpgrade}
                    className="bg-gradient-to-r from-vibrant-orange to-orange-600 hover:from-orange-600 hover:to-vibrant-orange text-white px-3 py-1 text-sm"
                    size="sm"
                  >
                    <Crown className="w-3 h-3 mr-1" />
                    Upgrade
                  </Button>
                )}
                
                <Button
                  onClick={onLogout}
                  variant="ghost"
                  size="sm"
                  className="text-gray-400 hover:text-white"
                  aria-label="Log out"
                >
                  <LogOut className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </header>

        <div className="flex-1 p-8 overflow-y-auto">
          <div className="max-w-6xl mx-auto">
            {renderMainContent}
          </div>
        </div>
      </div>
    </div>
  );
}
