
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Play, Pause, Volume2, Music, Sparkles } from "lucide-react";

interface ExampleTrackPlayerProps {
  onTryNow?: () => void;
}

export default function ExampleTrackPlayer({ onTryNow }: ExampleTrackPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(30);
  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);

  // Example track data - this would be generated by your melody generator
  const exampleTrack = {
    title: "AI Generated Demo",
    lyrics: "This is a test song\nWith multiple lines\nTo generate melody from",
    genre: "pop",
    mood: "happy",
    tempo: 120,
    key: "C",
    noteCount: 24,
    phrases: 3,
    audioPath: "/uploads/generated/example_track.wav" // This would be generated
  };

  useEffect(() => {
    // Create a synthetic audio example using Web Audio API
    const createExampleAudio = () => {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      // Create a simple melody pattern
      const frequencies = [261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25]; // C major scale
      let currentFreqIndex = 0;
      
      const playMelody = () => {
        if (isPlaying) {
          oscillator.frequency.setValueAtTime(frequencies[currentFreqIndex], audioContext.currentTime);
          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
          
          currentFreqIndex = (currentFreqIndex + 1) % frequencies.length;
          
          setTimeout(() => {
            if (isPlaying) {
              playMelody();
            }
          }, 500); // Change note every 500ms
        }
      };
      
      if (isPlaying) {
        oscillator.start();
        playMelody();
      }
      
      return () => {
        try {
          oscillator.stop();
          audioContext.close();
        } catch (e) {
          // Handle cleanup errors
        }
      };
    };

    let cleanup: (() => void) | undefined;
    
    if (isPlaying) {
      cleanup = createExampleAudio();
      
      // Simulate playback progress
      const interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= duration) {
            setIsPlaying(false);
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
      
      return () => {
        clearInterval(interval);
        if (cleanup) cleanup();
      };
    }
  }, [isPlaying, duration]);

  const togglePlayback = () => {
    setIsPlaying(!isPlaying);
    if (!isPlaying) {
      setCurrentTime(0);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <Card className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-500/30">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Music className="w-5 h-5 text-purple-400" />
          <span className="text-purple-100">Example AI Generated Track</span>
          <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30">
            Demo
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Track Info */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <span className="text-gray-400">Genre:</span>
            <p className="text-white font-medium">{exampleTrack.genre}</p>
          </div>
          <div>
            <span className="text-gray-400">Mood:</span>
            <p className="text-white font-medium">{exampleTrack.mood}</p>
          </div>
          <div>
            <span className="text-gray-400">Key:</span>
            <p className="text-white font-medium">{exampleTrack.key}</p>
          </div>
          <div>
            <span className="text-gray-400">Tempo:</span>
            <p className="text-white font-medium">{exampleTrack.tempo} BPM</p>
          </div>
        </div>

        {/* Lyrics Preview */}
        <div className="bg-gray-800/50 p-3 rounded-lg">
          <h4 className="text-purple-300 text-sm font-medium mb-2">Generated from lyrics:</h4>
          <p className="text-gray-300 text-sm italic">
            "{exampleTrack.lyrics.replace(/\n/g, ' / ')}"
          </p>
        </div>

        {/* Audio Player */}
        <div className="bg-gray-800/50 p-4 rounded-lg">
          <div className="flex items-center space-x-4">
            <Button
              onClick={togglePlayback}
              className="bg-purple-600 hover:bg-purple-700 text-white"
              size="sm"
            >
              {isPlaying ? (
                <Pause className="w-4 h-4" />
              ) : (
                <Play className="w-4 h-4" />
              )}
            </Button>
            
            <div className="flex-1">
              <div className="flex items-center justify-between text-sm text-gray-400 mb-1">
                <span>{formatTime(currentTime)}</span>
                <span>{formatTime(duration)}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div 
                  className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${(currentTime / duration) * 100}%` }}
                />
              </div>
            </div>
            
            <Volume2 className="w-4 h-4 text-gray-400" />
          </div>
        </div>

        {/* Generation Stats */}
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div className="bg-gray-800/30 p-3 rounded-lg">
            <span className="text-gray-400">Notes Generated:</span>
            <p className="text-white font-bold text-lg">{exampleTrack.noteCount}</p>
          </div>
          <div className="bg-gray-800/30 p-3 rounded-lg">
            <span className="text-gray-400">Phrases:</span>
            <p className="text-white font-bold text-lg">{exampleTrack.phrases}</p>
          </div>
        </div>

        {/* Call to Action */}
        <div className="pt-2">
          <Button 
            onClick={onTryNow}
            className="w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white"
          >
            <Sparkles className="w-4 h-4 mr-2" />
            Create Your Own Song Like This
          </Button>
        </div>

        {/* Technical Details */}
        <div className="text-xs text-gray-400 bg-gray-800/30 p-3 rounded-lg">
          <strong>How this was generated:</strong>
          <ul className="mt-1 space-y-1">
            <li>• Lyrics analyzed for emotional content and syllable patterns</li>
            <li>• Melody generated using advanced music theory algorithms</li>
            <li>• Harmonic progressions matched to genre and mood</li>
            <li>• Rhythm patterns synchronized with lyrical stress patterns</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}
